/**
 * 
 */
package it.ccse.uscite.application.service.impl;

import it.ccse.uscite.application.service.MailService;
import it.ccse.uscite.application.service.PraticaErogazioneService;
import it.ccse.uscite.domain.LavorazioneContabile;
import it.ccse.uscite.domain.PraticaErogazione;
import it.ccse.uscite.domain.PraticaErogazione.AutorizzazioneLegale;
import it.ccse.uscite.domain.PraticaErogazione.FideiussionePratica;
import it.ccse.uscite.domain.PraticaErogazione.StatoPratica;
import it.ccse.uscite.domain.PraticaErogazione.UnbundlingPratica;
import it.ccse.uscite.domain.ProcessoErogazione;
import it.ccse.uscite.domain.SettoreAttivita;
import it.ccse.uscite.domain.filter.PraticaFilter;
import it.ccse.uscite.domain.repository.PraticaErogazioneRepository;
import it.ccse.uscite.domain.repository.ProcessoErogazioneRepository;
import it.ccse.uscite.infrastructure.exception.ApplicationException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hamcrest.core.IsEqual;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ch.lambdaj.Lambda;

/**
 * @author vcompagnone
 *
 */
@Service
@Transactional(readOnly=false)
public class PraticaErogazioneServiceImpl implements PraticaErogazioneService {

	@Autowired
	private PraticaErogazioneRepository praticaErogazioneRepository;
	@Autowired
	private ProcessoErogazioneRepository processoErogazioneRepository;

	@Autowired
	private MailService mailService;



	/* (non-Javadoc)
	 * @see it.ccse.dbuscite.application.service.PraticaErogazioneService#getById(java.lang.Integer)
	 */
	@Override
	@Transactional(readOnly=true)
	public PraticaErogazione getById(Integer id) {
		return praticaErogazioneRepository.findOne(id);
	}

	@Override
	public void createPraticaErogazione(PraticaErogazione praticaErogazione) {
		praticaErogazione.init();
		//ProcessoErogazione processo = processoErogazioneRepository.findOne(praticaErogazione.getProcessoErogazione().getId());
		//praticaErogazione.setProcessoErogazione(processo);

	}

	@Override
	public void savePraticaErogazione(PraticaErogazione praticaErogazione) {
		praticaErogazioneRepository.save(praticaErogazione);
	}

	@Override
	public void delete(PraticaErogazione praticaErogazione) {
		praticaErogazioneRepository.delete(praticaErogazione);
		praticaErogazione.setId(null);
	}

	@Override
	@Transactional(readOnly=true)
	public Page<PraticaErogazione> searchPraticheErogazione(PraticaFilter filter) {
		return praticaErogazioneRepository.findAll(filter.getBooleanExpression(),filter.getPageable());
	}

	@Override
	@Transactional(readOnly=true)
	public PraticaErogazione getByCodicePratica(String codicePratica) {
		return praticaErogazioneRepository.findByCodicePratica(codicePratica);
	}

	@Override
	@Transactional(readOnly=true)
	public List<PraticaErogazione> getPraticheByProcessoErogazione(
			ProcessoErogazione processo) {
		return praticaErogazioneRepository.findByProcessoErogazione(processo);
	}

	@Override
	@Transactional(readOnly=true)
	public List<PraticaErogazione> getPraticheLavorabili(ProcessoErogazione processo) {
		PraticaFilter filter = new PraticaFilter();
		filter.setIdProcessoErogazione(processo.getId());
		filter.setStatiPratica(StatoPratica.LAVORABILE);
		Page<PraticaErogazione> pratiche =  searchPraticheErogazione(filter);
		return pratiche != null ? pratiche.getContent() : null;
	}

	@Override
	public ProcessoErogazione associaPraticheANota(
			List<PraticaErogazione> pratiche, ProcessoErogazione processo) {
		Integer idProcesso = processo.getId();
		processo = processoErogazioneRepository.findOne(idProcesso);
		if(processo == null){
			throw new ApplicationException("error.nota.notFound.associazionePraticaNota");
		}
		for(PraticaErogazione pratica :pratiche){

			PraticaErogazione praticaEsistente = praticaErogazioneRepository.findByCodicePratica(pratica.getCodicePratica());
			if( praticaEsistente != null){
				praticaEsistente.checkModificabilita();
				pratica.init();
				pratica.setLavorazioneContabile(praticaEsistente.getLavorazioneContabile());				
				pratica.setId(praticaEsistente.getId());
			}else{
				pratica.checkInit();
				pratica.init();
			}

			pratica.associaANota(processo);
		}
		praticaErogazioneRepository.save(pratiche);
		return processo;
	}

	@Override
	public void dissociaPraticheDaNota(
			List<PraticaErogazione> pratiche) {	
		Lambda.forEach(pratiche).checkDissociaDaNota();
		//		for(PraticaErogazione pratica: pratiche){
		//			Integer id = pratica.getId();
		//			pratica = praticaErogazioneRepository.findOne(id);
		//			if(pratica == null){
		//				throw new ApplicationException("error.pratica.notFound.dissociazionePraticaNota");
		//			}
		//			pratica.dissociaDaNota();
		//		}
		//		praticaErogazioneRepository.save(pratiche);

		delete(pratiche);
	}

	@Override
	public void delete(List<PraticaErogazione> pratiche) {
		praticaErogazioneRepository.delete(pratiche);		
	}

	@Override
	@Transactional(readOnly=true)
	public List<PraticaErogazione> getPraticheAutorizzabiliComitato(ProcessoErogazione processo) {
		PraticaFilter filter = new PraticaFilter();
		filter.setStatiPratica(StatoPratica.ASSEGNATO);
		filter.setIdProcessoErogazione(processo.getId());
		Page<PraticaErogazione> pratiche = searchPraticheErogazione(filter);
		return pratiche!= null ? pratiche.getContent() : null;
	}

	@Override
	public LavorazioneContabile lavorazioneContabile(List<PraticaErogazione> pratiche) {
		LavorazioneContabile lavorazioneContabile = new LavorazioneContabile();
		List<PraticaErogazione> praticheLavorate = new ArrayList<PraticaErogazione>();
		List<Integer> ids = Lambda.extract(pratiche, Lambda.on(PraticaErogazione.class).getIdPraticaErogazione());
		pratiche = praticaErogazioneRepository.findAll(ids);
		for(PraticaErogazione pratica:pratiche){
			pratica.lavorazioneContabile();
			praticheLavorate.add(pratica);
			if(pratica.getLavorazioneContabile() == StatoPratica.IN_EROGAZIONE){
				lavorazioneContabile.addErogazioni(pratica);
			}else if(pratica.getLavorazioneContabile() == StatoPratica.IN_SOSPESO){
				lavorazioneContabile.addSospesi(pratica);
			}
		}
		Set<ProcessoErogazione> processi = new HashSet<ProcessoErogazione>(Lambda.extract(pratiche, Lambda.on(PraticaErogazione.class).getProcessoErogazione()));
		Lambda.forEach(processi).lavorazioneContabile();	

		praticaErogazioneRepository.save(praticheLavorate);
		processoErogazioneRepository.save(processi);
		return lavorazioneContabile;
	}

	@Override
	public List<PraticaErogazione> aggiornaSemaforiAnagrafica(Collection<SettoreAttivita> settoriAttivita) {
		

		List<PraticaErogazione> pratiche = new ArrayList<PraticaErogazione>();


		for(SettoreAttivita settoreAttivita:settoriAttivita){
			PraticaFilter filter = new PraticaFilter();
			filter.setListaIdSettoriAttivita(settoreAttivita.getId());
			filter.setStatiPratica(getStatiPraticaModificabile());
			Page<PraticaErogazione> pagePratiche = searchPraticheErogazione(filter);
			if(pagePratiche!=null){
				List<PraticaErogazione> praticheBySettore = pagePratiche.getContent();
				for(PraticaErogazione pratica:praticheBySettore){
					pratica.getSettoreAttivita().setRagioneSociale(settoreAttivita.getRagioneSociale());
					AutorizzazioneLegale autorizzazioneLegale = pratica.getAutorizzazioneLegale();
					UnbundlingPratica unbundlingPratica = pratica.getUnbundling();
					AutorizzazioneLegale nuovaAntimafia = pratica.aggiornaAntimafia(settoreAttivita.getStatoAntimafia());
					UnbundlingPratica nuovoUnbundling = pratica.aggiornaUnbundling(settoreAttivita.getUnbundling());
					if(autorizzazioneLegale != nuovaAntimafia || unbundlingPratica != nuovoUnbundling){
						pratiche.add(pratica);
					}
				}
			}
		}

		List<PraticaErogazione> praticheErogabili = Lambda.select(pratiche, Lambda.having(Lambda.on(PraticaErogazione.class).isErogabile(),IsEqual.equalTo(true)));
		if(!praticheErogabili.isEmpty()){
			mailService.sendMailSbloccoAnagraficaPratiche(praticheErogabili);
		}
		return praticaErogazioneRepository.save(pratiche);
	}

	@Override
	@Transactional(readOnly=true)
	public Page<PraticaErogazione> searchPraticheInSospeso(PraticaFilter filter) {
		filter.setStatiPratica(StatoPratica.IN_SOSPESO);
		return searchPraticheErogazione(filter);
	}

	@Override
	public void autorizzaComitato(List<PraticaErogazione> pratiche) {

		if(pratiche != null && !pratiche.isEmpty()){
			List<Integer> ids = Lambda.extract(pratiche, Lambda.on(PraticaErogazione.class).getIdPraticaErogazione());
			pratiche = praticaErogazioneRepository.findAll(ids);
			for(PraticaErogazione pratica:pratiche){
				pratica.autorizzaComitato();
			}
			praticaErogazioneRepository.save(pratiche);
			mailService.sendMailAutorizzazioneComitato(pratiche);
		}
	}

	@Override
	public void rifiutaAutorizzazioneComitato(List<PraticaErogazione> pratiche) {
		if(pratiche != null && !pratiche.isEmpty()){
			List<Integer> ids = Lambda.extract(pratiche, Lambda.on(PraticaErogazione.class).getIdPraticaErogazione());
			pratiche = praticaErogazioneRepository.findAll(ids);
			for(PraticaErogazione pratica:pratiche){
				pratica.rifiutaAutorizzazioneComitato();
			}
			praticaErogazioneRepository.save(pratiche);
		}
	}

	@Override
	public List<PraticaErogazione> aggiornaFideiussione(List<PraticaErogazione> pratiche) {
		List<PraticaErogazione> praticheModificate = null;
		if(pratiche!=null){
			praticheModificate = new ArrayList<PraticaErogazione>();
			Map<String,FideiussionePratica> mappaCodiciFideiussione = new HashMap<String,FideiussionePratica>();
			for(PraticaErogazione pratica:pratiche){
				mappaCodiciFideiussione.put(pratica.getCodicePratica(), pratica.getFideiussione());
			}

			List<String> codiciPratica = new ArrayList<String>(mappaCodiciFideiussione.keySet());
			PraticaFilter filter = new PraticaFilter();
			filter.setCodiciPratica(codiciPratica);
			filter.setStatiPratica(getStatiPraticaModificabile());
			Page<PraticaErogazione> page = searchPraticheErogazione(filter);
			if(page!=null){
				List<PraticaErogazione> praticheEsistenti = page.getContent();
				for(PraticaErogazione pratica:praticheEsistenti){
					FideiussionePratica fideiussionePratica = pratica.getFideiussione();
					FideiussionePratica nuovaFideiussione = pratica.aggiornaFideiussione(mappaCodiciFideiussione.get(pratica.getCodicePratica()));
					if(nuovaFideiussione!=fideiussionePratica){
						praticheModificate.add(pratica);
					}
				}
			}
		}
		return praticaErogazioneRepository.save(praticheModificate);
	}

	public List<StatoPratica>  getStatiPraticaModificabile(){
		List<StatoPratica> stati = new ArrayList<StatoPratica>();
		stati.add(StatoPratica.ASSEGNATO);
		stati.add(StatoPratica.DONT_CARE);
		stati.add(StatoPratica.IN_INSERIMENTO);
		stati.add(StatoPratica.IN_SOSPESO);
		stati.add(StatoPratica.LAVORABILE);
		stati.add(StatoPratica.LAVORATO);
		stati.add(StatoPratica.UNDEFINED);
		return stati;
	}
	
}
