/**
 * 
 */
package it.ccse.uscite.infrastructure.aop;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;


/**
 * @author vcompagnone
 *
 */
@Aspect
@Order(2)
public class LoggingAspect {
	
	@Before(value="execution(public * it.ccse.uscite..*.*(..))")
	public void beforeLog(JoinPoint jp) throws Throwable{
		final Logger logger = LoggerFactory.getLogger(jp.getTarget().getClass().getName());
		if(logger.isDebugEnabled()){
			logger.debug("Inizio metodo {}",jp.getSignature());
			StringBuilder input = buildInput(jp);
			if(input != null){
				logger.trace("input = {}",input);
			}
		}
	}
	
	@AfterReturning(pointcut = "execution(public * it.ccse.uscite..*.*(..))",returning="result")
	public void afterReturningLog(JoinPoint jp,Object result) throws Throwable{
		final Logger logger = LoggerFactory.getLogger(jp.getTarget().getClass().getName());
		if(logger.isDebugEnabled()){
			logger.debug("Fine Metodo {}",jp.getSignature());
			if(result!=null){
				logger.trace("output = {}",result.toString());
			}
		}
	}
	
	@AfterThrowing(pointcut = "execution(public * it.ccse.uscite..*.*(..))",throwing = "e")
	public void afterThrowingLog(JoinPoint jp, Throwable e) throws Throwable{
		final Logger logger = LoggerFactory.getLogger(jp.getTarget().getClass().getName());
		logger.error(e.getMessage(),e);
		StringBuilder input = buildInput(jp);
		if(input != null){
			logger.error("input = {}",input);
		}
		
	}

	private static StringBuilder buildInput(JoinPoint jp) {
		StringBuilder sb = null;
		Object[] args = jp.getArgs();
		if(args != null && args.length>0){
			sb = new StringBuilder();
			for(Object arg :args){
				sb.append(arg!=null?arg.toString():null);
				sb.append("\n");
			}
		}
		return sb;
	}
}
